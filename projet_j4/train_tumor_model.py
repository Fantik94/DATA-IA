import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import joblib

def train_tumor_model():
    """Entra√Æne un mod√®le pour pr√©dire si une tumeur est canc√©reuse"""
    
    # 1. Chargement des donn√©es
    print("üìä Chargement des donn√©es...")
    df = pd.read_csv('tumor_two_vars.csv')
    print(f"Donn√©es charg√©es: {df.shape}")
    print(f"Colonnes: {df.columns.tolist()}")
    print(f"R√©partition des classes: \n{df['is_cancerous'].value_counts()}")
    print()
    
    # Pr√©paration des features et target
    X = df[['size', 'p53_concentration']]
    y = df['is_cancerous']
    
    # 2. Train test split
    print("üîÑ Division des donn√©es (train/test split)...")
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )
    print(f"Train set: {X_train.shape}")
    print(f"Test set: {X_test.shape}")
    print()
    
    # 3. MinMaxScaler sur les donn√©es d'entra√Ænement
    print("‚öôÔ∏è Application du MinMaxScaler...")
    scaler = MinMaxScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)  # Important: transform, pas fit_transform
    
    print(f"Avant scaling - Train min/max: {X_train.min().min():.6f} / {X_train.max().max():.6f}")
    print(f"Apr√®s scaling - Train min/max: {X_train_scaled.min():.6f} / {X_train_scaled.max():.6f}")
    print()
    
    # 4. Entra√Ænement du mod√®le
    print("ü§ñ Entra√Ænement du mod√®le de r√©gression logistique...")
    model = LogisticRegression(random_state=42)
    model.fit(X_train_scaled, y_train)
    
    # √âvaluation du mod√®le
    y_pred_train = model.predict(X_train_scaled)
    y_pred_test = model.predict(X_test_scaled)
    
    train_accuracy = accuracy_score(y_train, y_pred_train)
    test_accuracy = accuracy_score(y_test, y_pred_test)
    
    print(f"Accuracy sur train: {train_accuracy:.4f}")
    print(f"Accuracy sur test: {test_accuracy:.4f}")
    print()
    
    print("üìà Rapport de classification (test set):")
    print(classification_report(y_test, y_pred_test))
    
    # 5. Sauvegarde du mod√®le ET du scaler
    print("üíæ Sauvegarde du mod√®le et du scaler...")
    joblib.dump(model, "tumor_model.joblib")
    joblib.dump(scaler, "tumor_scaler.joblib")  # TR√àS IMPORTANT !
    
    print("‚úÖ Mod√®le sauvegard√© dans 'tumor_model.joblib'")
    print("‚úÖ Scaler sauvegard√© dans 'tumor_scaler.joblib'")
    print()
    
    # Exemple de pr√©dictions
    print("üîÆ Exemples de pr√©dictions:")
    exemples = X_test.head(10)
    exemples_scaled = scaler.transform(exemples)
    predictions = model.predict(exemples_scaled)
    probabilities = model.predict_proba(exemples_scaled)
    
    for i, (idx, row) in enumerate(exemples.iterrows()):
        pred = predictions[i]
        prob = probabilities[i][1]  # Probabilit√© d'√™tre canc√©reux
        real = y_test.iloc[i]
        print(f"Exemple {i+1}: size={row['size']:.6f}, p53={row['p53_concentration']:.6f}")
        print(f"  Pr√©diction: {'Canc√©reux' if pred == 1 else 'Non canc√©reux'} (prob: {prob:.3f})")
        print(f"  R√©alit√©: {'Canc√©reux' if real == 1 else 'Non canc√©reux'}")
        print(f"  ‚úÖ Correct: {'Oui' if pred == real else 'Non'}")
        print()

if __name__ == "__main__":
    train_tumor_model() 